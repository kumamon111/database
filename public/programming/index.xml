<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Business base</title>
    <link>https://busi-base.tk/programming/</link>
    <description>Recent content in Programming on Business base</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 26 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://busi-base.tk/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>今更ながら加重平均と単純平均の違いって？</title>
      <link>https://busi-base.tk/programming/statistics1/</link>
      <pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://busi-base.tk/programming/statistics1/</guid>
      <description>今更ながら加重平均と単純平均の違いって？  加重平均 (weighted average)  単純平均の算式に株式数・数量（単位換算の量）等でウエイトすることにより求められる平均価格
an average resulting from the multiplication of each component by a factor reflecting its importance
 単純平均 (simple average)  対象となる銘柄を、それぞれ１株ずつ保有した場合の平均価格
うーん&amp;hellip;
これだけじゃよくわからないと思うので、以下の例をご覧ください。
Now moving on to the example
ソースコード import numpy as np import pandas as pd import pandas_datareader.data as web import matplotlib.pyplot as plt tickers = &amp;quot;BCHARTS/BITSTAMPUSD&amp;quot; cur_data = web.DataReader(tickers, &#39;quandl&#39;, &#39;2018-02-23&#39;, &#39;2018-02-26&#39;)[[&amp;quot;Close&amp;quot;, &amp;quot;VolumeCurrency&amp;quot;]]  
quandle APIを使用して、4日間のビットコイン価格を取得します。
Using quandle API, Let&amp;rsquo;s get the bitcoin data for 4 days I randomly select.</description>
    </item>
    
    <item>
      <title>Bitcoinの収益率を対数差分で出して見た。(Python)</title>
      <link>https://busi-base.tk/programming/return/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://busi-base.tk/programming/return/</guid>
      <description>コード例 import quandl import matplotlib.pyplot as plt import pandas as pd import numpy as np # get the data from quandl mydata_01 = quandl.get(&#39;BCHARTS/BITSTAMPUSD&#39;, start_date=&amp;quot;2012-01-01&amp;quot;, end_date=&amp;quot;2017-02-23&amp;quot;) #print(mydata_01) # csv mydata_01.to_csv(&#39;データ保存先&#39;) # log returns #今回はこちらを使用 # log(クローズの価格 ÷ 1日前のクローズの価格) mydata_01[&#39;log_return&#39;] = np.log(mydata_01[&#39;Close&#39;] / mydata_01[&#39;Close&#39;].shift(1)) # simple returns # (クローズの価格 ÷ 1日前のクローズの価格) - 1 # mydata_01[&#39;simple_return&#39;] = (mydata_01[&#39;Close&#39;] / mydata_01[&#39;Close&#39;].shift(1)) - 1 mydata_01[&#39;simple_return&#39;] mydata_01[&#39;log_return&#39;].plot() # show matrix plt.show()  解説 対数(log)を使用したのは、分散を一定に近くするため。</description>
    </item>
    
    <item>
      <title>株価の基礎的なリターンリスクを算出(Python)</title>
      <link>https://busi-base.tk/programming/var/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://busi-base.tk/programming/var/</guid>
      <description>コード例 import numpy as np import pandas as pd import pandas_datareader.data as web # define stock that you take ticker = [&amp;quot;FB&amp;quot;] # web.DataReader(取得したい銘柄, どこから取得するか, いつから始めるか) sec_data = web.DataReader(ticker, data_source=&amp;quot;morningstar&amp;quot;, start=&amp;quot;2016-1-1&amp;quot;)[&amp;quot;Close&amp;quot;] #下から５つ表示 print(sec_data.tail()) #収益率 sec_return = np.log(sec_data/sec_data.shift(1)) #標準偏差 sec_return_std = sec_return.std() #分散 sec_return_var = sec_return.std()*250**0.5 print(sec_return_std, sec_return_var) # 0.014795688350667528 0.23394037369064727  解説 標準偏差(不偏標準偏差 == np.std(a, ddof=1)) std() 分散 std() * 1年間のマーケット日数 ** 0.5 &amp;lsquo;**&amp;lsquo;は二乗</description>
    </item>
    
    <item>
      <title>Pythonで機械学習！第一回</title>
      <link>https://busi-base.tk/programming/ml_1/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://busi-base.tk/programming/ml_1/</guid>
      <description>本日は機械学習第1回!
その1 前処理 Preprocessing 機械学習において、データの前処理は重要です。
そもそも前処理って何？っていう人も多いとは思いますが、料理で言う所の「焼き芋を蒸すまでのプロセス」です。
「???」
ですよね。まあ順に見ていきましょう。
例えば、「チョコレートの新商品を売りたい」っていうマーケターがいたとします。まず何をしますか？
データを取りますよね。これがまず最初の行程。
でも集めてきたデータだってそんなに万能なわけじゃない。欠損してる値とか外れ値とかもある。
これを取り除くのが行程2。
そして最後にデータの全てをコンピューターが読み込める形にする。これが行程3。
つまり、「美味しいさつまいもの選定 → 野菜ですからたまーに腐ってるとこもあるのでそこを切る → さつまいもは大きいですから小さい鍋の大きさに材料を切って入れる」
みたいな感じですかね！
とまあ例に困りましたが、大丈夫です。具体的にナロウダウンしたいと思います！
データの読み込み ここからはコードで解説。こんな感じのデータ読み込んでいきます。
   Country Age Salary Purchased     japan 44 29000 No   us 50 48000 Yes   uk 40 62000 No   Spain 38 91000 No   japan 80 nan Yes   France 35 58000 Yes   uk nan 81000 No   France 27 79000 Yes   us 50 80000 No   mexico 48 67000 Yes    # import modules import numpy as np import pandas as pd import matplotlib.</description>
    </item>
    
    <item>
      <title>Pythonスクレイピング・クローリング(1) ~HTMLの読み込み~</title>
      <link>https://busi-base.tk/programming/scrap1/</link>
      <pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://busi-base.tk/programming/scrap1/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Pythonスクレイピング・クローリング(2) ~CSSセレクタで要素・テキストの抽出~</title>
      <link>https://busi-base.tk/programming/scrap2/</link>
      <pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://busi-base.tk/programming/scrap2/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>統計Rを使った分析（１）</title>
      <link>https://busi-base.tk/programming/r1/</link>
      <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://busi-base.tk/programming/r1/</guid>
      <description>今後ビックデータの発展によってますます期待が高まる未来予測。その中で最も不確実性の高い（私が知る中では）為替・株式相場の分析を行っていきたいと思います。この件に関しましては全くのビギナーでありますので、学習したことをつらつら綴るような記事にはなると思いますが、同じような志を持つ学生とともに作り上げ、将来につなげていければと思います。
今回はまず、今後の統計にあたって必要なコマンドを紹介していきます。
スカラー平均
mean  ベクトル平均
ave  分散
mean((x-ave(x)^2)  標準偏差
√mean((x-ave(x)^2)  不偏分散
var  不偏標準偏差
sd  確率分布の乱数発生
rnome(10) rnome(100) rnome(1000)  ()内は数</description>
    </item>
    
  </channel>
</rss>